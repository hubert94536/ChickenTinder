[ CURRENT BACKEND NEEDS ]
- User Authentication (compute)
- Database to store users (storage)
    user_id = { 
        password=’123’
        email=’123@email.com’
        phone_number=123-123-1234
        saved_restaurants = [
            restaurant_id
        ]
    }

- Search -> search algorithm
    - require some server compute

[PROGRAMMATIC FLOW]
- Sign in

- [Feature] restaurant matching
    - YELP api
    - if saved
        - send a POST request to server to save the restaurant_id for user
    -if liked
        - stored temporarily within the group
    - option to leave session
    - if not go to next one

- [Feature] make matching session
    - needs host 
        -adds people to group/chooses previous group
        -sets the number of rounds
        -sets takeout/dining/delivery, dietary restrictions, 
         price limit, location(current/search), radius, majority(type # of ppl agree)
            -store for next round
    - users 
        - sets type of cuisine-> 1 master list
            -if master list is null -> every cuisine counts
        - "don't care" button-> null response
    - use WebSockets 

- [Feature] match is made
    - if majority -> return the restaurant
        - button "go restaurant" -> 
            -end round  
            -reset restaurants    
            -sends everyone back to make group page
    - no majority by end of round ->
        - show restaurants with > (1/2 of set majority) liked (progress bar)
        - button to revote for each restaurant
        - button to continue next round
    - if no more restaurants -> reset, sends everyone back to make group page

- [Feature] Saved restaurants
    -mini cards -> click to expand to full card
    -only options: view / remove card

- [Feature] Friends / Groups
    -Friends page:
        -view / delete
    - Groups page:
        -delete -> leave group
        -log of visited restaurants
        -group is created after 1 session

-[Feature] User profile
    -email, phone number, username, password, picture

Frontend
    ||
--[REST API]--
    ||
    \/
Backend 
    ||
--------
    ||
    \/
Database

[[ RECOMMENDATION ]]

[Backend Server]
Node.js: Runtime Environment
Express.js: web framework
WebSockets: connection + room (matching session)

Heroku: for production so your server ip address is not ugly 
    (
        development: http://123.12.12.12:3000
        production: https://heroku.asdjfasdfa/
    )

[Database]
postgreSQL: relational database

user_id = { 
        password=’123’
        email=’123@email.com’
        phone_number=123-123-1234
        saved_restaurants = [
            restaurant_id
        ]
    }